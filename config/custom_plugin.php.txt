<?php
/**
 * Plugin Name: MyPlugin
 * Plugin URI: https://www.appmysite.com
 * Description: This plugin enables WordPress & WooCommerce users to sync their websites with native iOS and Android apps, created on <a href="https://www.appmysite.com/"><strong>www.appmysite.com</strong></a>
 * Version: 3.10.0
 * Author: AppMySite
 * Text Domain: appmysite
 * Author URI: https://appmysite.com
 * Tested up to: 6.3.1
 * WC tested up to: 8.0.3
 * WC requires at least: 3.8.0
 * License:           GPL v2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 **/



// Hook into WordPress to execute your code when the page loads.
add_action('rest_api_init', 'register_custom_password_reset_endpoint');

function register_custom_password_reset_endpoint() {
  
  register_rest_route(
						'wc/v3',
						'/password-reset',
						array(
							'methods'  => 'POST',
							'callback' => 'custom_reset_password_callback',
							'permission_callback' => '__return_true',
						)
					);
  
   register_rest_route(
						'wc/v3',
						'/addtocart2',
						array(
							'methods'  => 'POST',
							'callback' => 'woocomm_add_to_cart',
							'permission_callback' => '__return_true',
						)
					);
  
   register_rest_route(
						'wc/v3',
						'/cart2',
						array(
							'methods'  => 'GET',
							'callback' => 'woocomm_cart_list',
							'permission_callback' => '__return_true',
						)
					);
  
 
  
}



 function woocomm_add_to_cart($param) {
   global $wpdb;
   $user_id = $param['user_id'];
   wp_set_current_user($user_id);
   $objProduct = new WC_Session_Handler();
   $wc_session_data = $objProduct->get_session($user_id);
   // Get the persistent cart may be _woocommerce_persistent_cart can be in your case
   //check in user meta table
   $full_user_meta = get_user_meta($user_id,'_woocommerce_persistent_cart_1', true);

   if (defined('WC_ABSPATH')) {
   // WC 3.6+ Cart and other frontend functions are not included for REST
   //requests.
   include_once WC_ABSPATH . 'includes/wc-cart-functions.php';
   include_once WC_ABSPATH . 'includes/wc-notice-functions.php';
   include_once WC_ABSPATH . 'includes/wc-template-hooks.php';
   }

   if ( null == WC()->session) {
   $session_class = apply_filters('woocommerce_session_handler',
   'WC_Session_Handler');
   WC()->session = new $session_class();
   WC()->session->init();
    }
if (null == WC()->customer) {
WC()->customer = new WC_Customer(get_current_user_id(), true);
}

  if (null == WC()->cart ) {
WC()->cart = new WC_Cart();
// We need to force a refresh of the cart contents from session here (cart
//contents are normally refreshed on wp_loaded, which has already happened by
//this point).
WC()->cart->get_cart ();
}
// create new Cart Object
$cartObj = WC()->cart;



// Add old cart data to newly created cart object
if($full_user_meta['cart']) {
foreach ($full_user_meta['cart'] as $sinle_user_meta) {
$cartObj->add_to_cart($sinle_user_meta['product_id'],$sinle_user_meta['quantity'],$sinle_user_meta['variation_id']);
}
}
// Add product and quantities coming in request to the new cart object
if ($param['products']) {
WC()->cart->empty_cart ();
foreach($param ['products'] as $prod) {
$cartObj->add_to_cart($prod['product_id'],$prod['quantity'],$prod['variation_id']);
}
}

$updatedCart = [];
foreach ($cartObj->cart_contents as $key => $val) {
unset ($val['data']);
$updatedCart[$key] = $val;
}
// If there is a current session cart, overwrite it with the new cart
if ($wc_session_data) {
$wc_session_data['cart'] = serialize($updatedCart);
$serializedObj = maybe_serialize($wc_session_data);


$table_name = 'wp_woocommerce_sessions';
// Update the wp_session table with updated cart data
$sql ="UPDATE $table_name SET session_value= '".$serializedObj."' WHERE
session_key = ".$user_id."'";
// Execute the query
$rez = $wpdb->query($sql);
}
// Overwrite the persistent cart with the new cart data
$full_user_meta['cart'] = $updatedCart;

$products_InCart = [];
foreach($cartObj->cart_contents as $cart_item) {
$product = $cart_item['variation_id'] == 0 ? wc_get_product($cart_item['product_id']) : wc_get_product($cart_item['variation_id']);
$image_id = $product->get_image_id();
$image_url = wp_get_attachment_image_url( $image_id, 'full');
$attributes= $product->get_attributes();
$productsInCart[] = (object) [
"product_id" => $cart_item['product_id'],
"product_name" => wc_get_product($cart_item['product_id'])->get_name(),
"product_regular_price" => $product->get_regular_price(),
"product_sale_price" => $product->get_sale_price(),
"thumbnail" => $image_url,
"qty" => $cart_item ['quantity'],
"attribute" => $attributes,
"line_subtotal" => $cart_item ['line_subtotal'],
"line_total" => $cart_item ['line_total'],
"variation_id" => $cart_item ['variation_id'],
];

}

update_user_meta(get_current_user_id(),'_woocommerce_persistent_cart_1', array (
'cart' => $updatedCart, )); 
$response = [
'status' => true,
'data' => $full_user_meta ['cart'] != null ? $productsInCart : []
];
return rest_ensure_response ($response);

}

 function woocomm_cart_list ($param) {
$user_id = $param['user_id'];
$objProduct = new WC_Session_Handler();
$wc_session_data = $objProduct->get_session($user_id);
// Get the persistent cart may be _woocommerce_persistent_cart can be in your case
//check in user_meta table I
$full_user_meta = get_user_meta($user_id,'_woocommerce_persistent_cart_1', true);

$productsInCart = [];
foreach ($full_user_meta['cart'] as $cart_item) {
//$product = wc_get_product($cart_item['product_id']);
$product = $cart_item['variation_id'] == 0 ? wc_get_product($cart_item['product_id']) : wc_get_product($cart_item['variation_id']);
$image_id = $product->get_image_id ();
$image_url = wp_get_attachment_image_url($image_id,'full');
$attributes= $product->get_attributes();
$productsInCart[] = (object) [
"product_id" => $cart_item['product_id'],
"product_name" => $product->get_name(),
"product_regular_price" => $product->get_regular_price(),
"product_sale_price" => $product->get_sale_price(),
"thumbnail" => $image_url,
"qty" => $cart_item['quantity'],
"attribute" => $attributes,
"line_subtotal" => $cart_item['line_subtotal'],
"line_total" => $cart_item['line_total'],
"variation_id" => $cart_item ['variation_id'],
];
}

$response = [
'status' => true,
'data' => $full_user_meta['cart'] != null ? $productsInCart : []
];
return rest_ensure_response($response);
}

   

function custom_reset_password_callback($request) {
    $login = $request->get_param('login');

    if (empty($login)) {
        $response = array('code' => '0', 'msg' => 'Please enter login user detail');
    } else {
        $user = get_user_by('email', $login);

        if (empty($user)) {
            $user = get_user_by('login', $login);
        }

        if (empty($user)) {
            $response = array('code' => '101', 'msg' => 'User not found');
        } else {
            $user_id = $user->ID;
            $reset_key = get_password_reset_key($user);

            $wc_emails = WC()->mailer()->get_emails();
            $wc_emails['WC_Email_Customer_Reset_Password']->trigger($user->user_login, $reset_key);
         

            $response = array('code' => '200', 'msg' => 'Password reset link has been sent to your registered email');
        }
    }

    return new WP_REST_Response($response, 200);
}